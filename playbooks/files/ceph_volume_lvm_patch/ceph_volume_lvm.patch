--- lvm.py_patched	2021-02-24 15:21:10.407269511 +0000
+++ lvm.py	2021-02-24 15:21:15.139586629 +0000
@@ -586,33 +586,11 @@
         disk_sizing['percentages'] = extent_sizing['percentages']
         return disk_sizing

-
     def bytes_to_extents(self, size):
         '''
-        Return a how many free extents we can fit into a size in bytes. This has
-        some uncertainty involved. If size/extent_size is within 1% of the
-        actual free extents we will return the extent count, otherwise we'll
-        throw an error.
-        This accomodates for the size calculation in batch. We need to report
-        the OSD layout but have not yet created any LVM structures. We use the
-        disk size in batch if no VG is present and that will overshoot the
-        actual free_extent count due to LVM overhead.
+        Return a how many extents we can fit into a size in bytes.
         '''
-        b_to_ext = int(size / int(self.vg_extent_size))
-        if b_to_ext < int(self.vg_free_count):
-            # return bytes in extents if there is more space
-            return b_to_ext
-        elif b_to_ext / int(self.vg_free_count) - 1 < 0.01:
-            # return vg_fre_count if its less then 1% off
-            logger.info(
-                'bytes_to_extents results in {} but only {} '
-                'are available, adjusting the latter'.format(b_to_ext,
-                                                             self.vg_free_count))
-            return int(self.vg_free_count)
-        # else raise an exception
-        raise RuntimeError('Can\'t convert {} to free extents, only {} ({} '
-                           'bytes) are free'.format(size, self.vg_free_count,
-                                                    self.free))
+        return int(size / int(self.vg_extent_size))

     def slots_to_extents(self, slots):
         '''
